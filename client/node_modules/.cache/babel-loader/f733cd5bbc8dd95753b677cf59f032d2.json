{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar assert = require('assert');\n\nvar RedisError = require('redis-parser').RedisError;\n\nvar ADD_STACKTRACE = false;\n\nfunction AbortError(obj, stack) {\n  assert(obj, 'The options argument is required');\n  assert.strictEqual(typeof obj, 'object', 'The options argument has to be of type object');\n  RedisError.call(this, obj.message, ADD_STACKTRACE);\n  Object.defineProperty(this, 'message', {\n    value: obj.message || '',\n    configurable: true,\n    writable: true\n  });\n\n  if (stack || stack === undefined) {\n    Error.captureStackTrace(this, AbortError);\n  }\n\n  for (var keys = Object.keys(obj), key = keys.pop(); key; key = keys.pop()) {\n    this[key] = obj[key];\n  }\n}\n\nfunction AggregateError(obj) {\n  assert(obj, 'The options argument is required');\n  assert.strictEqual(typeof obj, 'object', 'The options argument has to be of type object');\n  AbortError.call(this, obj, ADD_STACKTRACE);\n  Object.defineProperty(this, 'message', {\n    value: obj.message || '',\n    configurable: true,\n    writable: true\n  });\n  Error.captureStackTrace(this, AggregateError);\n\n  for (var keys = Object.keys(obj), key = keys.pop(); key; key = keys.pop()) {\n    this[key] = obj[key];\n  }\n}\n\nutil.inherits(AbortError, RedisError);\nutil.inherits(AggregateError, AbortError);\nObject.defineProperty(AbortError.prototype, 'name', {\n  value: 'AbortError',\n  configurable: true,\n  writable: true\n});\nObject.defineProperty(AggregateError.prototype, 'name', {\n  value: 'AggregateError',\n  configurable: true,\n  writable: true\n});\nmodule.exports = {\n  AbortError: AbortError,\n  AggregateError: AggregateError\n};","map":null,"metadata":{},"sourceType":"script"}