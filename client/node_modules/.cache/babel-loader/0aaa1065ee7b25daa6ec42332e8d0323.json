{"ast":null,"code":"/**\n * Copyright (c) 2013 Petka Antonov\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:</p>\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\"use strict\";\n\nfunction Deque(capacity) {\n  this._capacity = getCapacity(capacity);\n  this._length = 0;\n  this._front = 0;\n\n  if (isArray(capacity)) {\n    var len = capacity.length;\n\n    for (var i = 0; i < len; ++i) {\n      this[i] = capacity[i];\n    }\n\n    this._length = len;\n  }\n}\n\nDeque.prototype.toArray = function Deque$toArray() {\n  var len = this._length;\n  var ret = new Array(len);\n  var front = this._front;\n  var capacity = this._capacity;\n\n  for (var j = 0; j < len; ++j) {\n    ret[j] = this[front + j & capacity - 1];\n  }\n\n  return ret;\n};\n\nDeque.prototype.push = function Deque$push(item) {\n  var argsLength = arguments.length;\n  var length = this._length;\n\n  if (argsLength > 1) {\n    var capacity = this._capacity;\n\n    if (length + argsLength > capacity) {\n      for (var i = 0; i < argsLength; ++i) {\n        this._checkCapacity(length + 1);\n\n        var j = this._front + length & this._capacity - 1;\n        this[j] = arguments[i];\n        length++;\n        this._length = length;\n      }\n\n      return length;\n    } else {\n      var j = this._front;\n\n      for (var i = 0; i < argsLength; ++i) {\n        this[j + length & capacity - 1] = arguments[i];\n        j++;\n      }\n\n      this._length = length + argsLength;\n      return length + argsLength;\n    }\n  }\n\n  if (argsLength === 0) return length;\n\n  this._checkCapacity(length + 1);\n\n  var i = this._front + length & this._capacity - 1;\n  this[i] = item;\n  this._length = length + 1;\n  return length + 1;\n};\n\nDeque.prototype.pop = function Deque$pop() {\n  var length = this._length;\n\n  if (length === 0) {\n    return void 0;\n  }\n\n  var i = this._front + length - 1 & this._capacity - 1;\n  var ret = this[i];\n  this[i] = void 0;\n  this._length = length - 1;\n  return ret;\n};\n\nDeque.prototype.shift = function Deque$shift() {\n  var length = this._length;\n\n  if (length === 0) {\n    return void 0;\n  }\n\n  var front = this._front;\n  var ret = this[front];\n  this[front] = void 0;\n  this._front = front + 1 & this._capacity - 1;\n  this._length = length - 1;\n  return ret;\n};\n\nDeque.prototype.unshift = function Deque$unshift(item) {\n  var length = this._length;\n  var argsLength = arguments.length;\n\n  if (argsLength > 1) {\n    var capacity = this._capacity;\n\n    if (length + argsLength > capacity) {\n      for (var i = argsLength - 1; i >= 0; i--) {\n        this._checkCapacity(length + 1);\n\n        var capacity = this._capacity;\n        var j = (this._front - 1 & capacity - 1 ^ capacity) - capacity;\n        this[j] = arguments[i];\n        length++;\n        this._length = length;\n        this._front = j;\n      }\n\n      return length;\n    } else {\n      var front = this._front;\n\n      for (var i = argsLength - 1; i >= 0; i--) {\n        var j = (front - 1 & capacity - 1 ^ capacity) - capacity;\n        this[j] = arguments[i];\n        front = j;\n      }\n\n      this._front = front;\n      this._length = length + argsLength;\n      return length + argsLength;\n    }\n  }\n\n  if (argsLength === 0) return length;\n\n  this._checkCapacity(length + 1);\n\n  var capacity = this._capacity;\n  var i = (this._front - 1 & capacity - 1 ^ capacity) - capacity;\n  this[i] = item;\n  this._length = length + 1;\n  this._front = i;\n  return length + 1;\n};\n\nDeque.prototype.peekBack = function Deque$peekBack() {\n  var length = this._length;\n\n  if (length === 0) {\n    return void 0;\n  }\n\n  var index = this._front + length - 1 & this._capacity - 1;\n  return this[index];\n};\n\nDeque.prototype.peekFront = function Deque$peekFront() {\n  if (this._length === 0) {\n    return void 0;\n  }\n\n  return this[this._front];\n};\n\nDeque.prototype.get = function Deque$get(index) {\n  var i = index;\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  var len = this._length;\n\n  if (i < 0) {\n    i = i + len;\n  }\n\n  if (i < 0 || i >= len) {\n    return void 0;\n  }\n\n  return this[this._front + i & this._capacity - 1];\n};\n\nDeque.prototype.isEmpty = function Deque$isEmpty() {\n  return this._length === 0;\n};\n\nDeque.prototype.clear = function Deque$clear() {\n  var len = this._length;\n  var front = this._front;\n  var capacity = this._capacity;\n\n  for (var j = 0; j < len; ++j) {\n    this[front + j & capacity - 1] = void 0;\n  }\n\n  this._length = 0;\n  this._front = 0;\n};\n\nDeque.prototype.toString = function Deque$toString() {\n  return this.toArray().toString();\n};\n\nDeque.prototype.valueOf = Deque.prototype.toString;\nDeque.prototype.removeFront = Deque.prototype.shift;\nDeque.prototype.removeBack = Deque.prototype.pop;\nDeque.prototype.insertFront = Deque.prototype.unshift;\nDeque.prototype.insertBack = Deque.prototype.push;\nDeque.prototype.enqueue = Deque.prototype.push;\nDeque.prototype.dequeue = Deque.prototype.shift;\nDeque.prototype.toJSON = Deque.prototype.toArray;\nObject.defineProperty(Deque.prototype, \"length\", {\n  get: function () {\n    return this._length;\n  },\n  set: function () {\n    throw new RangeError(\"\");\n  }\n});\n\nDeque.prototype._checkCapacity = function Deque$_checkCapacity(size) {\n  if (this._capacity < size) {\n    this._resizeTo(getCapacity(this._capacity * 1.5 + 16));\n  }\n};\n\nDeque.prototype._resizeTo = function Deque$_resizeTo(capacity) {\n  var oldCapacity = this._capacity;\n  this._capacity = capacity;\n  var front = this._front;\n  var length = this._length;\n\n  if (front + length > oldCapacity) {\n    var moveItemsCount = front + length & oldCapacity - 1;\n    arrayMove(this, 0, this, oldCapacity, moveItemsCount);\n  }\n};\n\nvar isArray = Array.isArray;\n\nfunction arrayMove(src, srcIndex, dst, dstIndex, len) {\n  for (var j = 0; j < len; ++j) {\n    dst[j + dstIndex] = src[j + srcIndex];\n    src[j + srcIndex] = void 0;\n  }\n}\n\nfunction pow2AtLeast(n) {\n  n = n >>> 0;\n  n = n - 1;\n  n = n | n >> 1;\n  n = n | n >> 2;\n  n = n | n >> 4;\n  n = n | n >> 8;\n  n = n | n >> 16;\n  return n + 1;\n}\n\nfunction getCapacity(capacity) {\n  if (typeof capacity !== \"number\") {\n    if (isArray(capacity)) {\n      capacity = capacity.length;\n    } else {\n      return 16;\n    }\n  }\n\n  return pow2AtLeast(Math.min(Math.max(16, capacity), 1073741824));\n}\n\nmodule.exports = Deque;","map":null,"metadata":{},"sourceType":"script"}