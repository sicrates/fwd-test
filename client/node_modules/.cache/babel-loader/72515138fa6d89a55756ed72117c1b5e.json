{"ast":null,"code":"'use strict';\n\nvar hiredis = require('hiredis');\n\nvar ReplyError = require('../lib/replyError');\n\nvar ParserError = require('../lib/parserError');\n/**\n * Parse data\n * @param parser\n * @returns {*}\n */\n\n\nfunction parseData(parser, data) {\n  try {\n    return parser.reader.get();\n  } catch (err) {\n    // Protocol errors land here\n    // Reset the parser. Otherwise new commands can't be processed properly\n    parser.reader = new hiredis.Reader(parser.options);\n    parser.returnFatalError(new ParserError(err.message, JSON.stringify(data), -1));\n  }\n}\n/**\n * Hiredis Parser\n * @param options\n * @constructor\n */\n\n\nfunction HiredisReplyParser(options) {\n  this.returnError = options.returnError;\n  this.returnFatalError = options.returnFatalError || options.returnError;\n  this.returnReply = options.returnReply;\n  this.name = 'hiredis';\n  this.options = {\n    return_buffers: !!options.returnBuffers\n  };\n  this.reader = new hiredis.Reader(this.options);\n}\n\nHiredisReplyParser.prototype.execute = function (data) {\n  this.reader.feed(data);\n  var reply = parseData(this, data);\n\n  while (reply !== undefined) {\n    if (reply && reply.name === 'Error') {\n      this.returnError(new ReplyError(reply.message));\n    } else {\n      this.returnReply(reply);\n    }\n\n    reply = parseData(this, data);\n  }\n};\n/**\n * Reset the parser values to the initial state\n *\n * @returns {undefined}\n */\n\n\nHiredisReplyParser.prototype.reset = function () {\n  this.reader = new hiredis.Reader(this.options);\n};\n\nmodule.exports = HiredisReplyParser;","map":null,"metadata":{},"sourceType":"script"}