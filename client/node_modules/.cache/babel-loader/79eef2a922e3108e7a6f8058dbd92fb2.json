{"ast":null,"code":"'use strict';\n\nvar commands = require('redis-commands');\n\nvar Multi = require('./multi');\n\nvar RedisClient = require('../').RedisClient;\n\nvar Command = require('./command'); // Feature detect if a function may change it's name\n\n\nvar changeFunctionName = function () {\n  var fn = function abc() {};\n\n  try {\n    Object.defineProperty(fn, 'name', {\n      value: 'foobar'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}();\n\nvar addCommand = function (command) {\n  // Some rare Redis commands use special characters in their command name\n  // Convert those to a underscore to prevent using invalid function names\n  var commandName = command.replace(/(?:^([0-9])|[^a-zA-Z0-9_$])/g, '_$1'); // Do not override existing functions\n\n  if (!RedisClient.prototype[command]) {\n    RedisClient.prototype[command.toUpperCase()] = RedisClient.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n\n        arr = new Array(len);\n\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n\n      return this.internal_send_command(new Command(command, arr, callback));\n    }; // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n\n\n    if (commandName !== command) {\n      RedisClient.prototype[commandName.toUpperCase()] = RedisClient.prototype[commandName] = RedisClient.prototype[command];\n    }\n\n    if (changeFunctionName) {\n      Object.defineProperty(RedisClient.prototype[command], 'name', {\n        value: commandName\n      });\n    }\n  } // Do not override existing functions\n\n\n  if (!Multi.prototype[command]) {\n    Multi.prototype[command.toUpperCase()] = Multi.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n\n        arr = new Array(len);\n\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n\n      this.queue.push(new Command(command, arr, callback));\n      return this;\n    }; // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n\n\n    if (commandName !== command) {\n      Multi.prototype[commandName.toUpperCase()] = Multi.prototype[commandName] = Multi.prototype[command];\n    }\n\n    if (changeFunctionName) {\n      Object.defineProperty(Multi.prototype[command], 'name', {\n        value: commandName\n      });\n    }\n  }\n};\n\ncommands.list.forEach(addCommand);\nmodule.exports = addCommand;","map":null,"metadata":{},"sourceType":"script"}