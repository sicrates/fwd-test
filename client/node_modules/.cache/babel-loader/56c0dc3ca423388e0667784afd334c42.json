{"ast":null,"code":"'use strict';\n\nvar commands = require('./commands.json');\n/**\n * Redis command list\n *\n * All commands are lowercased.\n *\n * @var {string[]}\n * @public\n */\n\n\nexports.list = Object.keys(commands);\nvar flags = {};\nexports.list.forEach(function (commandName) {\n  flags[commandName] = commands[commandName].flags.reduce(function (flags, flag) {\n    flags[flag] = true;\n    return flags;\n  }, {});\n});\n/**\n * Check if the command exists\n *\n * @param {string} commandName - the command name\n * @return {boolean} result\n * @public\n */\n\nexports.exists = function (commandName) {\n  return Boolean(commands[commandName]);\n};\n/**\n * Check if the command has the flag\n *\n * Some of possible flags: readonly, noscript, loading\n * @param {string} commandName - the command name\n * @param {string} flag - the flag to check\n * @return {boolean} result\n * @public\n */\n\n\nexports.hasFlag = function (commandName, flag) {\n  if (!flags[commandName]) {\n    throw new Error('Unknown command ' + commandName);\n  }\n\n  return Boolean(flags[commandName][flag]);\n};\n/**\n * Get indexes of keys in the command arguments\n *\n * @param {string} commandName - the command name\n * @param {string[]} args - the arguments of the command\n * @param {object} [options] - options\n * @param {boolean} [options.parseExternalKey] - parse external keys\n * @return {number[]} - the list of the index\n * @public\n *\n * @example\n * ```javascript\n * getKeyIndexes('set', ['key', 'value']) // [0]\n * getKeyIndexes('mget', ['key1', 'key2']) // [0, 1]\n * ```\n */\n\n\nexports.getKeyIndexes = function (commandName, args, options) {\n  var command = commands[commandName];\n\n  if (!command) {\n    throw new Error('Unknown command ' + commandName);\n  }\n\n  if (!Array.isArray(args)) {\n    throw new Error('Expect args to be an array');\n  }\n\n  var keys = [];\n  var i, keyStart, keyStop, parseExternalKey;\n\n  switch (commandName) {\n    case 'zunionstore':\n    case 'zinterstore':\n      keys.push(0);\n    // fall through\n\n    case 'eval':\n    case 'evalsha':\n      keyStop = Number(args[1]) + 2;\n\n      for (i = 2; i < keyStop; i++) {\n        keys.push(i);\n      }\n\n      break;\n\n    case 'sort':\n      parseExternalKey = options && options.parseExternalKey;\n      keys.push(0);\n\n      for (i = 1; i < args.length - 1; i++) {\n        if (typeof args[i] !== 'string') {\n          continue;\n        }\n\n        var directive = args[i].toUpperCase();\n\n        if (directive === 'GET') {\n          i += 1;\n\n          if (args[i] !== '#') {\n            if (parseExternalKey) {\n              keys.push([i, getExternalKeyNameLength(args[i])]);\n            } else {\n              keys.push(i);\n            }\n          }\n        } else if (directive === 'BY') {\n          i += 1;\n\n          if (parseExternalKey) {\n            keys.push([i, getExternalKeyNameLength(args[i])]);\n          } else {\n            keys.push(i);\n          }\n        } else if (directive === 'STORE') {\n          i += 1;\n          keys.push(i);\n        }\n      }\n\n      break;\n\n    case 'migrate':\n      if (args[2] === '') {\n        for (i = 5; i < args.length - 1; i++) {\n          if (args[i].toUpperCase() === 'KEYS') {\n            for (var j = i + 1; j < args.length; j++) {\n              keys.push(j);\n            }\n\n            break;\n          }\n        }\n      } else {\n        keys.push(2);\n      }\n\n      break;\n\n    case 'xreadgroup':\n    case 'xread':\n      // Keys are 1st half of the args after STREAMS argument.\n      for (i = commandName === 'xread' ? 0 : 3; i < args.length - 1; i++) {\n        if (String(args[i]).toUpperCase() === 'STREAMS') {\n          for (j = i + 1; j <= i + (args.length - 1 - i) / 2; j++) {\n            keys.push(j);\n          }\n\n          break;\n        }\n      }\n\n      break;\n\n    default:\n      // Step has to be at least one in this case, otherwise the command does\n      // not contain a key.\n      if (command.step > 0) {\n        keyStart = command.keyStart - 1;\n        keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1;\n\n        for (i = keyStart; i < keyStop; i += command.step) {\n          keys.push(i);\n        }\n      }\n\n      break;\n  }\n\n  return keys;\n};\n\nfunction getExternalKeyNameLength(key) {\n  if (typeof key !== 'string') {\n    key = String(key);\n  }\n\n  var hashPos = key.indexOf('->');\n  return hashPos === -1 ? key.length : hashPos;\n}","map":null,"metadata":{},"sourceType":"script"}